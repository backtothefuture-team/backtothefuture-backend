name: Build and Push Docker Images

# dev 브랜치에 push 될때 작동
on:
  push:
    branches:
      - dev

env:
  CURRENT_VERSION: "0.1.0"

jobs:
  build-image-and-push:
    runs-on: ubuntu-latest
    # 권한을 read로 제한
    permissions:
      contents: read
    # jdk 17 설정
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      # gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      # 테스트 없이 빌드
      - name: Build with Gradle
        run: |
          ./gradlew -p api/member build -x test
          ./gradlew -p api/store build -x test
          ./gradlew -p api/event build -x test
      # 멀티플랫폼 이미지 빌드 환경 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # 멀티플랫폼 이미지 빌드 환경 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # dockerhub 에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # docker 이미지 빌드 / dockerhub 에 푸시
      # api/member
      - name: member api > Build and Push Docker images
        uses: docker/build-push-action@v5
        with:
          context: api/member
          file: api/member/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-member:${{ env.CURRENT_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-member:latest
      # api/store
      - name: store api > Build and Push Docker images
        uses: docker/build-push-action@v5
        with:
          context: api/store
          file: api/store/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-store:${{ env.CURRENT_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-store:latest
      # api/event
      - name: event api > Build and Push Docker images
        uses: docker/build-push-action@v5
        with:
          context: api/event
          file: api/event/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-event:${{ env.CURRENT_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-event:latest
      # swagger
      - name: swagger > Build and Push Docker images
        uses: docker/build-push-action@v5
        with:
          context: docs
          file: docs/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-swagger:${{ env.CURRENT_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/bagtothefuture-swagger:latest

      - name: Set .env file in EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            rm -rf ./.env
            touch ./.env

            echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} >> .env
            echo OAUTH_KAKAO_CLIENTID=${{ secrets.OAUTH_KAKAO_CLIENTID }} >> .env
            echo OAUTH_KAKAO_REDIRECT_URL=${{ secrets.OAUTH_KAKAO_REDIRECT_URL }} >> .env
            echo OAUTH_KAKAO_CLIENT_SECRET=${{ secrets.OAUTH_KAKAO_CLIENT_SECRET }} >> .env
            echo OAUTH_NAVER_CLIENTID=${{ secrets.OAUTH_NAVER_CLIENTID }} >> .env
            echo OAUTH_NAVER_CLIENT_SECRET=${{ secrets.OAUTH_NAVER_CLIENT_SECRET }} >> .env
            echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> .env
            echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env
            echo COULD_AWS_S3_REGION=${{ secrets.COULD_AWS_S3_REGION }} >> .env
            echo CLOUD_AWS_S3_ACCESSKEY=${{ secrets.CLOUD_AWS_S3_ACCESSKEY }} >> .env
            echo CLOUD_AWS_S3_SECRETKEY=${{ secrets.CLOUD_AWS_S3_SECRETKEY }} >> .env
            echo BUSINESS_VALIDATE_API_KEY=${{ secrets.BUSINESS_VALIDATE_API_KEY }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
            echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
            echo GOOGLE_FIREBASE_SERVICE_PROJECTID=${{ secrets.GOOGLE_FIREBASE_SERVICE_PROJECTID }} >> .env

      - uses: actions/checkout@v4
      - name: Copy docker-compose file in ec2 via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ec2-user/"


      - name: Depoly to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd ~
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
            docker stop $(docker ps -a -q) 
            docker rm -f $(docker ps -qa)
            chmod +x docker-compose.yml
            docker-compose pull
            docker-compose up -d
            docker image prune -f